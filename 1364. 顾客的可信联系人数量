SQL Schema:
Create table If Not Exists Customers (customer_id int, customer_name varchar(20), email varchar(30));
Create table If Not Exists Contacts (user_id int, contact_name varchar(20), contact_email varchar(30));
Create table If Not Exists Invoices (invoice_id int, price int, user_id int);
Truncate table Customers;
insert into Customers (customer_id, customer_name, email) values ('1', 'Alice', 'alice@leetcode.com');
insert into Customers (customer_id, customer_name, email) values ('2', 'Bob', 'bob@leetcode.com');
insert into Customers (customer_id, customer_name, email) values ('13', 'John', 'john@leetcode.com');
insert into Customers (customer_id, customer_name, email) values ('6', 'Alex', 'alex@leetcode.com');
Truncate table Contacts;
insert into Contacts (user_id, contact_name, contact_email) values ('1', 'Bob', 'bob@leetcode.com');
insert into Contacts (user_id, contact_name, contact_email) values ('1', 'John', 'john@leetcode.com');
insert into Contacts (user_id, contact_name, contact_email) values ('1', 'Jal', 'jal@leetcode.com');
insert into Contacts (user_id, contact_name, contact_email) values ('2', 'Omar', 'omar@leetcode.com');
insert into Contacts (user_id, contact_name, contact_email) values ('2', 'Meir', 'meir@leetcode.com');
insert into Contacts (user_id, contact_name, contact_email) values ('6', 'Alice', 'alice@leetcode.com');
Truncate table Invoices;
insert into Invoices (invoice_id, price, user_id) values ('77', '100', '1');
insert into Invoices (invoice_id, price, user_id) values ('88', '200', '1');
insert into Invoices (invoice_id, price, user_id) values ('99', '300', '2');
insert into Invoices (invoice_id, price, user_id) values ('66', '400', '2');
insert into Invoices (invoice_id, price, user_id) values ('55', '500', '13');
insert into Invoices (invoice_id, price, user_id) values ('44', '60', '6');


Table: Customers
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| customer_id   | int     |
| customer_name | varchar |
| email         | varchar |
+---------------+---------+
customer_id is the primary key for this table.
Each row of this table contains the name and the email of a customer of an online shop.

Table: Contacts
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | id      |
| contact_name  | varchar |
| contact_email | varchar |
+---------------+---------+
(user_id, contact_email) is the primary key for this table.
Each row of this table contains the name and email of one contact of customer with user_id.
This table contains information about people each customer trust. The contact may or may not exist in the Customers table.

Table: Invoices
+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| invoice_id   | int     |
| price        | int     |
| user_id      | int     |
+--------------+---------+
invoice_id is the primary key for this table.
Each row of this table indicates that user_id has an invoice with invoice_id and a price.

Write an SQL query to find the following for each invoice_id:
customer_name: The name of the customer the invoice is related to.
price: The price of the invoice.
contacts_cnt: The number of contacts related to the customer.
trusted_contacts_cnt: The number of contacts related to the customer and at the same time they are customers to the shop. (i.e His/Her email exists in the Customers table.)
Order the result table by invoice_id.

The query result format is in the following example:

Customers table:
+-------------+---------------+--------------------+
| customer_id | customer_name | email              |
+-------------+---------------+--------------------+
| 1           | Alice         | alice@leetcode.com |
| 2           | Bob           | bob@leetcode.com   |
| 13          | John          | john@leetcode.com  |
| 6           | Alex          | alex@leetcode.com  |
+-------------+---------------+--------------------+

Contacts table:
+-------------+--------------+--------------------+
| user_id     | contact_name | contact_email      |
+-------------+--------------+--------------------+
| 1           | Bob          | bob@leetcode.com   |
| 1           | John         | john@leetcode.com  |
| 1           | Jal          | jal@leetcode.com   |
| 2           | Omar         | omar@leetcode.com  |
| 2           | Meir         | meir@leetcode.com  |
| 6           | Alice        | alice@leetcode.com |
+-------------+--------------+--------------------+

Invoices table:
+------------+-------+---------+
| invoice_id | price | user_id |
+------------+-------+---------+
| 77         | 100   | 1       |
| 88         | 200   | 1       |
| 99         | 300   | 2       |
| 66         | 400   | 2       |
| 55         | 500   | 13      |
| 44         | 60    | 6       |
+------------+-------+---------+

Result table:
+------------+---------------+-------+--------------+----------------------+
| invoice_id | customer_name | price | contacts_cnt | trusted_contacts_cnt |
+------------+---------------+-------+--------------+----------------------+
| 44         | Alex          | 60    | 1            | 1                    |
| 55         | John          | 500   | 0            | 0                    |
| 66         | Bob           | 400   | 2            | 0                    |
| 77         | Alice         | 100   | 3            | 2                    |
| 88         | Alice         | 200   | 3            | 2                    |
| 99         | Bob           | 300   | 2            | 0                    |
+------------+---------------+-------+--------------+----------------------+

Alice has three contacts, two of them are trusted contacts (Bob and John).
Bob has two contacts, none of them is a trusted contact.
Alex has one contact and it is a trusted contact (Alice).
John doesn't have any contacts.

select I.invoice_id,C.customer_name,I.price,F2.contacts_cnt,F3.trusted_contacts_cnt 
from Invoices I left join Customers C on I.user_id = C.customer_id left join 
(select I.invoice_id,count(Co.user_id) contacts_cnt from Invoices I left join Contacts Co on I.user_id = Co.user_id group by invoice_id
) F2 on I.invoice_id = F2.invoice_id left join (select I.invoice_id,ifnull(trusted_contacts_cnt,0) trusted_contacts_cnt from Invoices I left join (
select user_id,count(*) trusted_contacts_cnt from Contacts
where contact_name in (select customer_name from Customers) group by user_id) F1 on I.user_id = F1.user_id) F3 on I.invoice_id = F3.invoice_id order by I.invoice_id

SELECT     i.invoice_id, d.customer_name, i.price, contacts_cnt, trusted_contacts_cnt
FROM      Invoices i
LEFT JOIN 
(SELECT       customer_id, customer_name, IFNULL(COUNT(DISTINCT contact_name),0) AS contacts_cnt,  IFNULL(COUNT(DISTINCT cus_contact_name),0) AS trusted_contacts_cnt
FROM
(SELECT      a.customer_id, a.customer_name, b.contact_name,
            CASE WHEN b.contact_name IN (SELECT DISTINCT customer_name FROM Customers) THEN contact_name ELSE NULL END AS cus_contact_name
FROM        Customers a
LEFT JOIN   Contacts b
ON          a.customer_id =b.user_id) AS c
GROUP BY    customer_id, customer_name) AS d
ON          i.user_id = d.customer_id
ORDER BY 	invoice_id;

select invoice_id, c.customer_name, i.price, a.contact_cnt, coalesce(b.trusted_contacts_cnt,0) trusted_contacts_cnt
from Invoices i left join Customers c on i.user_id=c.customer_id 
left join (select customer_id, count(user_id) as contact_cnt from Customers c left join Contacts co
on c.customer_id = co.user_id group by customer_id) a on c.customer_id= a.customer_id
left join(select customer_name, count(user_id) as trusted_contacts_cnt from Customers c left join Contacts co
on c.customer_id = co.user_id where contact_name in (select customer_name from customers) group by 
customer_name) b on c.customer_name= b.customer_name

select i.invoice_id, d.customer_name, i.price,contact_cnt, trusted_contacts_cnt from Invoices i left join(
select customer_id ,customer_name, coalesce(count(contact_name),0) as contact_cnt, sum(contact_cnt) as trusted_contacts_cnt from 
(select customer_id,customer_name, contact_name, case when contact_name in (select distinct customer_name from Customers)
then 1 else 0 end as contact_cnt from Customers left join Contacts on Customers.customer_id = Contacts.user_id) c
group by customer_name,customer_id) d on i.user_id= d.customer_id
